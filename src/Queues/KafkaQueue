<?php
namespace Hp\KafkaQueue\Queues;

use Illuminate\Contracts\Queue\Queue as QueueContract;
use Illuminate\Queue\Queue;

class KafkaQueue extends Queue implements QueueContract
{
    protected $consumer, $producer;

    public function __construct($consumer, $producer)
    {
        $this->consumer = $consumer;
        $this->producer = $producer;
    }

    public function size($queue = null)
    {

    }

    public function push($job, $data = '', $queue = null)
    {
        $topic = $this->producer->newTopic($queue ?? env('KAFKA_QUEUE'));
        $topic->producer(RD_KAFKA_PARTITION_UA, 0, serialize($job));
        $this->producer->flush(1000);
    }

    public function pushRaw($payload, $queue = null, array $options = [])
    {

    }

    public function later($delay, $job, $data = '', $queue = null)
    {

    }

    public function pop($queue = null)
    {
        $this->consumer->subscribe([$queue]);
        try {
            $message = $this->consumer->consume(120 * 1000);

            switch ($message->err) {
                case \RD_KAFKA_RESP_ERR_NO_ERROR :
                    $job = unserialize($message->$payload);
                    $job->handle();
                case \RD_KAFKA_RESP_ERR__PARTITION_EOF :
                    var_dump("NO more message; will wait for more\n");
                    break;
                case \RD_KAFKA_RESP_ERR__TIMED_OUT :
                    var_dump("Timed out\n");
                    break;
                default:
                    throw new \Exception($message->errstr(), $message->err);
                    break;
            }
        } catch (\Exception $e) {
            var_dump($e->getMessage());
        }
    }

    public function pushOn($queue, $job, $data = '')
    {

    }

    public function laterOn($queue, $delay, $job, $data = '')
    {

    }

    public function getConnectionName()
    {

    }
    public function setConnectionName($name)
    {

    }

    public function bulk($jobs, $data = '', $queue = null)
    {

    }
}
